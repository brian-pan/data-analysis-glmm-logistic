# install.packages("faraway")
library(faraway)
library(tidyverse)
library(Pmisc)
#install.packages("R.utils")
#install.packages("MASS")
install.packages("Pmisc", repos='http://r-forge.r-project.org')
knitr::opts_chunk$set(echo = TRUE)
x = read.table(cFile2, sep=',', header=TRUE, stringsAsFactors=FALSE)
cUrl =  'https://www.fueleconomy.gov/feg/epadata/vehicles.csv.zip'
cFile = file.path(tempdir(), basename(cUrl))
download.file(cUrl, cFile)
cFile2 = unzip(cFile, exdir=tempdir())
x = read.table(cFile2, sep=',', header=TRUE, stringsAsFactors=FALSE)
# read file:
car = read.table(cFile2, sep=',', header=TRUE, stringsAsFactors=FALSE)
# read file:
x = read.table(cFile2, sep=',', header=TRUE, stringsAsFactors=FALSE)
# Restrict to non-electric vehicles
car = x[grep("Electricity|CNG",
x$fuelType, invert=TRUE), ]
# Restrict to non-electric vehicles
car = x[grep("Electricity|CNG",
x$fuelType, invert = TRUE), ]
# Create a decade variable, centerd on 2000
car$decade = (car$year - 2000)/10
# Create a table of the car makes, in order form most to least cars in the dataset
Table = sort(table(car$make), decreasing = TRUE)
# Use the table above to make a factor
car$makeFac = factor(car$make, levels = names(Table))
# Make a factor for the numer of cylinders and reorder it so 4 cylinders will be your reference category (i.e., come first)
car$cylFac = relevel(factor(car$cylinders), '4')
# Check this worked
levels(car$cylFac)
# Get rid of vehicles with missing cylinder number
car = car[!is.na(car$cylFac), ]
# Make the transmission variable nice
car$transmission = factor(
grepl("Manual", car$trany), levels = c(FALSE,TRUE),
labels = c('Automatic', 'Manual'))
# Look at the classes of vehicle
table(car$VClass)
# Make a variable indicating if the vehicle had four-wheel drive
car$FWD = grepl("([[:punct:]]|[[:space:]])+4(WD|wd)",  car$VClass)
# Make a new, simpler vehicle type variable
car$type = gsub("Vans.*", "Vans",  car$VClass)
car$type = gsub("Vehicles", "Vehicle", car$type)
car$type = gsub("Standard[[:space:]]+", "", car$type)
car$type = factor(gsub("([[:punct:]]|[[:space:]])+(2|4)(WD|wd)", "",  xSub$type))
# Restrict to non-electric vehicles
car = x[grep("Electricity|CNG",
x$fuelType, invert = TRUE), ]
# Create a decade variable, centerd on 2000
car$decade = (car$year - 2000)/10
# Create a table of the car makes, in order form most to least cars in the dataset
Table = sort(table(car$make), decreasing = TRUE)
# Use the table above to make a factor
car$makeFac = factor(car$make, levels = names(Table))
# Make a factor for the numer of cylinders and reorder it so 4 cylinders will be your reference category (i.e., come first)
car$cylFac = relevel(factor(car$cylinders), '4')
# Check this worked
levels(car$cylFac)
# Get rid of vehicles with missing cylinder number
car = car[!is.na(car$cylFac), ]
# Make the transmission variable nice
car$transmission = factor(
grepl("Manual", car$trany), levels = c(FALSE,TRUE),
labels = c('Automatic', 'Manual'))
# Look at the classes of vehicle
table(car$VClass)
# Make a variable indicating if the vehicle had four-wheel drive
car$FWD = grepl("([[:punct:]]|[[:space:]])+4(WD|wd)",  car$VClass)
# Make a new, simpler vehicle type variable
car$type = gsub("Vans.*", "Vans",  car$VClass)
car$type = gsub("Vehicles", "Vehicle", car$type)
car$type = gsub("Standard[[:space:]]+", "", car$type)
car$type = factor(gsub("([[:punct:]]|[[:space:]])+(2|4)(WD|wd)", "",  car$type))
?grep
head(car)
x = data.frame(
make = rownames(my_random_effects$makeFac),
est = my_random_effects$makeFac[[1]],
se = drop(attributes(my_random_effects$makeFac)$postVar),
stringsAsFactors = FALSE
)
car %>%
mutate(grand_mean = mean(comb08)) %>%
group_by(makeFac) %>%
mutate(n_make = n()) %>%
filter(n_make >= 1000 | n_make %in% (5:15)) %>%
mutate(mean = mean(comb08)) %>%
ggplot(aes(x = makeFac, y = comb08)) +
geom_boxplot() +
geom_point(aes(y=mean), color = "red") +
geom_hline(aes(yintercept = grand_mean), color = "blue") +
coord_flip()
library(tidyverse)
library(Pmisc)
car %>%
mutate(grand_mean = mean(comb08)) %>%
group_by(makeFac) %>%
mutate(n_make = n()) %>%
filter(n_make >= 1000 | n_make %in% (5:15)) %>%
mutate(mean = mean(comb08)) %>%
ggplot(aes(x = makeFac, y = comb08)) +
geom_boxplot() +
geom_point(aes(y=mean), color = "red") +
geom_hline(aes(yintercept = grand_mean), color = "blue") +
coord_flip()
car_final %>%
ggplot(aes(y = comb08, x = "")) +
geom_boxplot(fill = "grey", color="black", bins = "30") +
coord_flip()
# Base R graphics
hist(car_final$comb08)
# Base R graphics
hist(final$comb08)
# select 7 variables to study:
final <- car %>%
select(comb08, decade, transmission, makeFac, cylFac, type, FWD, year) %>%
filter(year > 2000)
final %>%
mutate(grand_mean = mean(comb08)) %>%
group_by(makeFac) %>%
mutate(n_make = n()) %>%
filter(n_make >= 1000 | n_make %in% (5:15)) %>%
mutate(mean = mean(comb08)) %>%
ggplot(aes(x = makeFac, y = comb08)) +
geom_boxplot() +
geom_point(aes(y=mean), color = "red") +
geom_hline(aes(yintercept = grand_mean), color = "blue") +
coord_flip()
# Base R graphics
hist(final$comb08)
boxplot(final$comb08)
# ggplot
car_final %>%
ggplot(aes(x = comb08)) +
geom_histogram(fill = "grey", color="black", bins = "30")
# Base R graphics
hist(final$comb08)
boxplot(final$comb08)
# ggplot
final %>%
ggplot(aes(x = comb08)) +
geom_histogram(fill = "grey", color="black", bins = "30")
final %>%
ggplot(aes(y = comb08, x = "")) +
geom_boxplot(fill = "grey", color="black", bins = "30") +
coord_flip()
make_lmer <- lme4::lmer(comb08 ~ cylFac +
decade + transmission +
(1|makeFac),
data=car_final)
# Read in the data
csi_raw <- read_csv("analysisvariables.csv")
# Create a new variable called response that is
# 1 if ControlType equals case and filter to
# ControlTypes case and ran
csi_data <- csi_raw %>%
mutate(response = ifelse(ControlType == 'case', 1, 0)) %>%
filter(ControlType %in% c("case","ran")) %>%
mutate(site_fac = as.factor(SITE)) %>%
select(response, ControlType, Predisposed,
AlteredMentalStatus, AxialLoadAnyDoc,
HighriskMVC, HighriskHitByCar, HighriskDiving,
Clotheslining, site_fac)
glimpse(csi_data)
csi_data_clean <- na.omit(csi_data)
table(csi_data_clean$ControlType)
table(csi_data_clean$site_fac)
confint(csi_glm)
# import data:
csiRaw <- read_csv("analysisvariables.csv")
# import data:
csiRaw <- read_csv("analysisvariables.csv")
# import data:
csiRaw <- read_csv("analysisvariables.csv")
setwd("C:/Users/Brian Pan/Desktop/projectsBrian/data-analysis-glmm-logistic")
# import data:
csiRaw <- read_csv("analysisvariables.csv")
source('C:/Users/Brian Pan/Desktop/projectsBrian/data-analysis-glmm-logistic/glmm.R', echo=TRUE)
Pmisc::ranefPlot(csi_glmm)
library(tidyverse)
library(lmtest)
library(glmmTMB)
# Read in the data
csi_raw <- read_csv("analysisvariables.csv")
# Create a new variable called response that is
# 1 if ControlType equals case and filter to
# ControlTypes case and ran
csi_data <- csi_raw %>%
mutate(response = ifelse(ControlType == 'case', 1, 0)) %>%
filter(ControlType %in% c("case","ran")) %>%
mutate(site_fac = as.factor(SITE)) %>%
select(response, ControlType, Predisposed,
AlteredMentalStatus, AxialLoadAnyDoc,
HighriskMVC, HighriskHitByCar, HighriskDiving,
Clotheslining, site_fac)
glimpse(csi_data)
csi_data_clean <- na.omit(csi_data)
table(csi_data_clean$ControlType)
table(csi_data_clean$site_fac)
csi_glm <- glm(response~Predisposed + AlteredMentalStatus + AxialLoadAnyDoc +
HighriskMVC + HighriskHitByCar + HighriskDiving + Clotheslining, family=binomial(link="logit"), data=csi_data_clean)
summary(csi_glm)
# Students: Need to do the summary and CI
library(glmmTMB)
csi_glmm = glmmTMB(response ~ Predisposed + AlteredMentalStatus + AxialLoadAnyDoc +
HighriskMVC + HighriskHitByCar + HighriskDiving + Clotheslining +(1|site_fac),
family=binomial(link="logit"), data=csi_data_clean)
summary(csi_glmm)
knitr::kable(exp(confint(csi_glmm)), digits = 2)
Pmisc::ranefPlot(csi_glmm)
csi_glm_no_site <- glm(response ~ Predisposed + AlteredMentalStatus + AxialLoadAnyDoc +
HighriskMVC + HighriskHitByCar + HighriskDiving + Clotheslining, family = binomial(link = "logit"), data = csi_data_clean)
lmtest::lrtest(csi_glm_no_site, csi_glm)
summary(csi_glm_no_site)
exp(confint(csi_glm_no_site))
# Do a likelihood ratio test for the two GLMs,
# to see whether "site" is significant or not:
lmtest::lrtest(csi_glm_no_site, csi_glm)
#Do a likelihood ratio test for the GLM and GLMM,
# to see whether random effect is significant or not:
lmtest::lrtest(csi_glmm, csi_glm)
#Do a likelihood ratio test for the GLM and GLMM,
# to see whether random effect is significant or not:
lmtest::lrtest(csi_glm, csi_glmm)
